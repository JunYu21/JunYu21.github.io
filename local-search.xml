<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo搭建博客</title>
    <link href="/2024/01/21/hexo/"/>
    <url>/2024/01/21/hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="https://zhuanlan.zhihu.com/p/420368532">hexo+gitee(码云)免费搭建个人静态博客（避开所有坑） - 知乎 (zhihu.com)</a></p><h2 id="1-1-–hexo史上最全搭建教程"><a href="#1-1-–hexo史上最全搭建教程" class="headerlink" title="1.1 –hexo史上最全搭建教程"></a><strong>1.1 –hexo史上最全搭建教程</strong></h2><p><a href="https://link.zhihu.com/?target=https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304&#x2F;article&#x2F;details&#x2F;82729029</a></p><h2 id="1-2-–Markdown-基本语法"><a href="#1-2-–Markdown-基本语法" class="headerlink" title="1.2 –Markdown 基本语法"></a>1.2 –Markdown 基本语法</h2><p><a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法 | Markdown 官方教程</a></p><h2 id="1-3-–hexo-gitee-码云-搭建个人博客"><a href="#1-3-–hexo-gitee-码云-搭建个人博客" class="headerlink" title="1.3 –hexo+gitee(码云)搭建个人博客"></a><strong>1.3 –hexo+gitee(码云)搭建个人博客</strong></h2><p><a href="https://link.zhihu.com/?target=https://blog.csdn.net/weixin_45631738/article/details/104716374">https://blog.csdn.net/weixin_45</a></p><h3 id="Hexo博客搭建步骤"><a href="#Hexo博客搭建步骤" class="headerlink" title="Hexo博客搭建步骤"></a><strong>Hexo博客搭建步骤</strong></h3><ul><li>安装 Hexo</li><li>初始化 Hexo</li><li>编写文章</li><li>生成静态文件</li><li>部署到服务器或托管平台</li></ul><h3 id="1-Hexo-介绍"><a href="#1-Hexo-介绍" class="headerlink" title="1. Hexo 介绍"></a>1. Hexo 介绍</h3><p>Hexo 是一个基于 Node.js 的静态博客框架，它可以帮助你快速搭建静态博客网站。Hexo 将 Markdown 文件转换为静态 HTML 页面，使得博客的搭建和管理变得简单、高效。</p><h3 id="2-Hexo-的一些重要特点和组成部分"><a href="#2-Hexo-的一些重要特点和组成部分" class="headerlink" title="2. Hexo 的一些重要特点和组成部分"></a>2. Hexo 的一些重要特点和组成部分</h3><ol><li><strong>Markdown支持：</strong> Hexo 使用 Markdown 来书写博客文章，Markdown 是一种轻量级且易于书写的标记语言。</li><li><strong>静态网站生成：</strong> Hexo 将 Markdown 文件解析并转换为静态 HTML 页面，这样可以提高网站的加载速度和安全性。</li><li><strong>主题和样式：</strong> Hexo 支持各种主题和样式，可以根据个人喜好选择或自定义主题，使博客具有吸引力和个性化。</li><li><strong>插件系统：</strong> Hexo 有丰富的插件系统，可以通过插件扩展其功能，比如优化、标签云、SEO等。</li><li><strong>标签和分类：</strong> 可以对文章进行标签和分类，方便读者快速找到感兴趣的内容。</li><li><strong>自动部署：</strong> 可以配置自动部署到各种主流的博客托管平台，如GitHub Pages、Netlify等。</li><li><strong>快速：</strong> Hexo 提供快速的构建和部署功能，使得博客搭建的过程高效便捷。</li></ol><h3 id="3-Hexo相关命令"><a href="#3-Hexo相关命令" class="headerlink" title="3. Hexo相关命令"></a>3. Hexo相关命令</h3><p>hexo的安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">npm install hexo-cli -g <br></code></pre></td></tr></table></figure><p>初始化项目</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blogName<br></code></pre></td></tr></table></figure><p>清空已经存在的hexo网站文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span> <br></code></pre></td></tr></table></figure><p>依据网页文件和新的css样式生成新的网站文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span>(可简写g)<br></code></pre></td></tr></table></figure><p>启动本地服务器，可以在localhost：4000查看网站修改效果</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">hexo</span> <span class="hljs-function"><span class="hljs-title">server</span>(可简写为<span class="hljs-variable">s</span>)</span><br></code></pre></td></tr></table></figure><p>创建一篇文章，根目录的source里面的md文件可以修改文章内容</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;我的第一篇文章&quot;</span> <br></code></pre></td></tr></table></figure><p>安装上传到仓库的插件，才能进行发布文章的命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save   </span><br></code></pre></td></tr></table></figure><p>发布文章 一键部署并推送到gitee仓库上</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo g <span class="hljs-comment">--d</span><br></code></pre></td></tr></table></figure><h3 id="4-主题"><a href="#4-主题" class="headerlink" title="4. 主题"></a>4. 主题</h3><h4 id="fluid主题-leaf-domain"><a href="#fluid主题-leaf-domain" class="headerlink" title="fluid主题 leaf-domain"></a>fluid主题 <a href="https://leaf-domain.gitee.io/">leaf-domain</a></h4><ol><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册 (fluid-dev.github.io)</a></li><li><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></li><li><a href="https://hexo.fluid-dev.com/docs/advance/#hexo-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">进阶用法 | Hexo Fluid 用户手册 (fluid-dev.com)</a></li></ol><h4 id="butterfly主题"><a href="#butterfly主题" class="headerlink" title="butterfly主题"></a>butterfly主题</h4><ol><li><a href="https://github.com/jerryc127/hexo-theme-butterfly">github下载地址</a></li></ol><h4 id="next主题等等"><a href="#next主题等等" class="headerlink" title="next主题等等"></a>next主题等等</h4><ol><li>自己玩去吧</li></ol>]]></content>
    
    
    <categories>
      
      <category>搭建自己的博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>git</tag>
      
      <tag>nodejs</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件推送到远程部署</title>
    <link href="/2024/01/21/html%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/01/21/html%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_74292291/article/details/135359662?spm=1001.2014.3001.5501">如何免费静态部署一个html网页使每个人都可以访问到-CSDN博客</a></p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示:"></a>效果展示:</h2><ol><li>   <a href="https://leaf-domain.gitee.io/">叶域的博客</a></li><li>   <a href="https://leaf-domain.gitee.io/fireworks">烟花</a><br><a href="https://gitee.com/leaf-domain/fireworks">烟花的源码</a>都在仓库中可自行copy</li></ol><h2 id="配套视频教程"><a href="#配套视频教程" class="headerlink" title="配套视频教程:"></a>配套视频教程:</h2><p><a href="https://www.bilibili.com/video/BV1h94y1g73X/?spm_id_from=333.999.0.0&vd_source=66b6c4039d10d8bd570953cf39cace78">手把手教你免费部署Html静态界面_哔哩哔哩_bilibili</a></p><h2 id="一，准备工作"><a href="#一，准备工作" class="headerlink" title="一，准备工作"></a>一，准备工作</h2><ol><li><p>下载git并配置环境变量</p><p>官网下载地址: <a href="https://git-scm.com/download">Git - Downloads (git-scm.com)</a></p><p>git的介绍 <a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">Git - Git 是什么？ (git-scm.com)</a></p></li><li><p>注册[Gitee](<a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a>)账号并登录</p><p>Gitee的介绍与使用: <a href="https://gitee.com/mvphp/start_with_Gitee">Gitee入门教程: 轻松入门Gitee</a></p></li></ol><h2 id="二，使用Gitee提供的Gitee-Pages-服务进行部署"><a href="#二，使用Gitee提供的Gitee-Pages-服务进行部署" class="headerlink" title="二，使用Gitee提供的Gitee Pages 服务进行部署"></a>二，使用Gitee提供的Gitee Pages 服务进行部署</h2><ol><li>将本地文件推送到远程仓库</li><li>打开Pages服务</li></ol><p><strong>备注: 实名认证可能要个几天hh</strong></p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>gitee</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt学习第一天：新建qt工程，编写helloWorld，按钮信号和槽</title>
    <link href="/2024/01/21/qt1/"/>
    <url>/2024/01/21/qt1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_74292291/article/details/135371202?spm=1001.2014.3001.5502">Qt学习第一天：新建qt工程，编写helloWorld，按钮信号和槽-CSDN博客</a></p><h2 id="一，C-面向对象"><a href="#一，C-面向对象" class="headerlink" title="一，C++面向对象"></a>一，C++面向对象</h2><p><strong>学习qt要有一些c++面向对象的基础</strong><br>C++的类与类之间存在上下级的关系，类可以继承另外一个类。被继承的类通常称作为是基类。<br>而主动继承的类通常被称作是派生类。</p><h2 id="二，创建qt项目"><a href="#二，创建qt项目" class="headerlink" title="二，创建qt项目"></a>二，创建qt项目</h2><p><img src="https://img-blog.csdnimg.cn/direct/6473bd3c88f44a70bd14acc1060fa573.png" width="290px"><img src="https://img-blog.csdnimg.cn/direct/b9ce66daca154f6fab947c841e46b915.png" width="270px"><img src="https://img-blog.csdnimg.cn/direct/cf0e9a7e1a7e4d018e4c2b31949188ca.png" width="270px"></p><ol><li>创建工程时选择的QWidget类。<br> 该工程的目的就是为了创建一个窗口，对Qt的界面开发，就是基于此工程的，可以在窗口上添加组件或者自由设计均可。</li><li>然后一键next</li></ol><h2 id="三，目录详细介绍"><a href="#三，目录详细介绍" class="headerlink" title="三，目录详细介绍"></a>三，目录详细介绍</h2><p><img src="https://img-blog.csdnimg.cn/direct/adc73f50b8d2427d89c7fe972ad43c01.png" alt="在这里插入图片描述"></p><h3 id="1，C-程序的入口main-cpp"><a href="#1，C-程序的入口main-cpp" class="headerlink" title="1，C++程序的入口main.cpp"></a>1，C++程序的入口main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// widget.h是Qt生成窗口用的类，该类继承了QWidget类，也就意味着widget类包含了QWidget类的所有功能。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;widget.h&quot;</span></span><br><span class="hljs-comment">// 大写的Q为开头的类，都是Qt提供给我们的类</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// QApplication类作为Qt程序的入口实现。也作为程序的结束。</span><br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    <span class="hljs-comment">// 实例化一个窗口类的对象w</span><br>    Widget w;<br>    <span class="hljs-comment">// w.show()的作用是使得窗口能够显示出来</span><br>    w.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2，Qt生成窗口的类的头文件widget-h"><a href="#2，Qt生成窗口的类的头文件widget-h" class="headerlink" title="2，Qt生成窗口的类的头文件widget.h"></a>2，Qt生成窗口的类的头文件widget.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIDGET_H</span><br><span class="hljs-comment">// 添加基类的头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span></span><br>QT_BEGIN_NAMESPACE<br><span class="hljs-comment">// 声明命名空间Ui，Ui下声明了Widget类</span><br><span class="hljs-keyword">namespace</span> Ui &#123; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span>; &#125;<br>QT_END_NAMESPACE<br><span class="hljs-comment">// Widget公共继承QWidget</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br><span class="hljs-comment">// Qt提供给类的宏定义，里面包含了Qt的核心机制，必须要添加，否则极有可能造成程序编译错误。</span><br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 构造函数：基类的指针，默认值为nullptr</span><br>    <span class="hljs-built_in">Widget</span>(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-comment">// 析构函数，这里也是一个虚析构函数</span><br>    ~<span class="hljs-built_in">Widget</span>();<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 命名空间下Widget类的指针</span><br>    Ui::Widget *ui;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// WIDGET_H</span></span><br></code></pre></td></tr></table></figure><h3 id="3，Qt生成窗口的类的实现文件widget-cpp"><a href="#3，Qt生成窗口的类的实现文件widget-cpp" class="headerlink" title="3，Qt生成窗口的类的实现文件widget.cpp"></a>3，Qt生成窗口的类的实现文件widget.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_widget.h&quot;</span></span><br><br><span class="hljs-comment">// 以下写法为构造函数的初始化列表</span><br><span class="hljs-comment">// 初始化列表在这里的作用是：</span><br><span class="hljs-comment">// 1) 将参数parent透过基类的构造函数传参，并调用基类的构造函数</span><br><span class="hljs-comment">// 2) 将ui指针实例化Ui::Widget对象</span><br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br><span class="hljs-comment">// ui对象调用成员函数setupUi,其作用为，运行设计师界面的内容</span><br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br><br>Widget::~<span class="hljs-built_in">Widget</span>()<br>&#123;<br><span class="hljs-comment">// 释放ui指针的堆空间</span><br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四，写个hello-world并调节其样式"><a href="#四，写个hello-world并调节其样式" class="headerlink" title="四，写个hello world并调节其样式"></a>四，写个hello world并调节其样式</h2><h3 id="1，通过代码实现"><a href="#1，通过代码实现" class="headerlink" title="1，通过代码实现"></a>1，通过代码实现</h3><h4 id="在widget-h头文件中添加"><a href="#在widget-h头文件中添加" class="headerlink" title="在widget.h头文件中添加"></a>在widget.h头文件中添加</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLabel&gt;</span>  <span class="hljs-comment">// 声明组件所需要用到的类</span></span><br>QLabel *label;   <span class="hljs-comment">// 声明组件所需要用到的指针</span><br></code></pre></td></tr></table></figure><p>添加后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span></span><br><span class="hljs-comment">// 声明组件所需要用到的类</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLabel&gt;</span></span><br>QT_BEGIN_NAMESPACE<br><span class="hljs-keyword">namespace</span> Ui &#123; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span>; &#125;<br>QT_END_NAMESPACE<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Widget</span>(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    ~<span class="hljs-built_in">Widget</span>();<br><span class="hljs-keyword">private</span>:<br>    Ui::Widget *ui;<br><span class="hljs-comment">// 声明组件所需要用到的指针</span><br>    QLabel *label;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// WIDGET_H</span></span><br></code></pre></td></tr></table></figure><h4 id="widget-cpp里"><a href="#widget-cpp里" class="headerlink" title="widget.cpp里"></a>widget.cpp里</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_widget.h&quot;</span></span><br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-comment">// 调整窗口的大小</span><br>    <span class="hljs-built_in">resize</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>);<br><span class="hljs-comment">// 实例化标签对象，第一个参数&quot;Hello World&quot;代表label的文本信息。</span><br><span class="hljs-comment">// 第二个参数this，代表窗口，意思是将label标签贴在this窗口上</span><br>label = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-comment">// setGeometry代表设置组件的几何信息，包括：x坐标，y坐标，w宽度，h高度</span><br>    label-&gt;<span class="hljs-built_in">setGeometry</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>);<br>    <span class="hljs-comment">// setAlignment代表设置组件内字体的对齐方式，Qt::AlignCenter也代表将文字居中对齐</span><br>    label-&gt;<span class="hljs-built_in">setAlignment</span>(Qt::AlignCenter);<br>    <span class="hljs-comment">// setStyleSheet代表设置组件的样式表，其中可以修改字体的大小。</span><br>    label-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;font:50px&quot;</span>);<br>&#125;<br>Widget::~<span class="hljs-built_in">Widget</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><img src="https://img-blog.csdnimg.cn/direct/d09bce553248452d88a4c19d3db06232.png" width="220"><p>拉伸窗口会发现Hello World会原位不动<br><img src="https://img-blog.csdnimg.cn/direct/94a7ee81bb494b709388f637f830b028.png" width="280"></p><h4 id="设计样式1-将label组件始终放在窗口的正中间"><a href="#设计样式1-将label组件始终放在窗口的正中间" class="headerlink" title="设计样式1 将label组件始终放在窗口的正中间"></a>设计样式1 将label组件始终放在窗口的正中间</h4><p>在Qt生成的工程当中，如果没有添加组件，并且可以拉伸窗口大小的话，拉太小可能会隐藏窗口上的组件，拉太大又有些影响美观，所以我们想要，保持组件们一直持续显示在窗口的正中央。</p><h5 id="1-在widget-h头文件中添加"><a href="#1-在widget-h头文件中添加" class="headerlink" title="1) 在widget.h头文件中添加"></a>1) 在widget.h头文件中添加</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QHBoxLayout&gt;</span>  <span class="hljs-comment">// 声明组件所需要用到的类</span></span><br>QHBoxLayout *hboxlayout;  <span class="hljs-comment">// 声明组件所需要用到的指针</span><br></code></pre></td></tr></table></figure><p>上同</p><h5 id="2-widget-cpp里添加"><a href="#2-widget-cpp里添加" class="headerlink" title="2) widget.cpp里添加"></a>2) widget.cpp里添加</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// QHBoxLayout的基类是QBoxLayout，他还有一个兄弟，为QVBoxLayout，自己是水平布局，兄弟是垂直布局。</span><br><span class="hljs-comment">// 所有的布局往上的基类都是QLayout</span><br>hboxlayout = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QHBoxLayout</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-comment">// 在布局里添加组件</span><br>hboxlayout-&gt;<span class="hljs-built_in">addWidget</span>(label);<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/direct/08b7f74714ff44749a5ce2492c8e1f79.png" width="390"><p>这样如何拉伸界面Hello World都会在窗户正中央</p><h4 id="设计样式2-样式表"><a href="#设计样式2-样式表" class="headerlink" title="设计样式2 样式表"></a>设计样式2 样式表</h4><p>在Qt中，修改组件或者窗口的字体、背景颜色等等，都可以通过设置样式表实现。<br>一些比较炫酷的界面效果也可以用样式表实现。</p><p>在如下的代码实例中，不同的样式表语句，需要用分号隔开，不然会引起冲突。<br>由于不会对函数内的字符串类型纠错，注意不得有拼写错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// font可以设置字体的样式</span><br><span class="hljs-comment">// background-color修改背景颜色</span><br><span class="hljs-comment">// color修改文本信息的颜色</span><br><span class="hljs-comment">// rgb表示颜色由红绿蓝三色组成，每个颜色的通道占据一个字节的数据(最大值为FF，255)</span><br>   label-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;font:50px;\</span><br><span class="hljs-string">                         background-color:rgb(45, 9, 34);\</span><br><span class="hljs-string">                         color:rgb(255, 255, 255);\</span><br><span class="hljs-string">                        &quot;</span>);<br></code></pre></td></tr></table></figure><p>在Qt中，也可以用QSS语句实现样式表的功能，QSS语句类似于HTML CSS语言，用{}整合想要的数据，在内部通过 “属性:数值” 的方式设置自己想要的效果 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QString sheet = <span class="hljs-string">&quot;QLabel\</span><br><span class="hljs-string">&#123;\</span><br><span class="hljs-string">font:50px;\</span><br><span class="hljs-string">background-color:rgb(22, 22, 11);\</span><br><span class="hljs-string">color:rgb(19, 133, 33);\</span><br><span class="hljs-string">&#125;;&quot;</span>;<br>label-&gt;<span class="hljs-built_in">setStyleSheet</span>(sheet);<br></code></pre></td></tr></table></figure><h3 id="2，进入Qt设计师界面"><a href="#2，进入Qt设计师界面" class="headerlink" title="2，进入Qt设计师界面"></a>2，进入Qt设计师界面</h3><p>先双击Forms文件夹下widget.ui文件，进入Qt设计师界面。<br><img src="https://img-blog.csdnimg.cn/direct/de00ed16a40f4db88da60a6a9ad96029.png" width="270"><br>在左列中找到label，将label拖拽到窗口的正中间<br><img src="https://img-blog.csdnimg.cn/direct/8f3820fa38b949b9a4437f650e97de57.png" width="390"><br>在右上角对象与类的列表中，找到窗口Widget，点击选中窗口。<br>在右下角geometry可以修改窗口的尺寸，再同步以下label的位置。<br>选择label，在右下角找到alignment，水平和垂直均选择为Center，代表居中对齐。<br><img src="https://img-blog.csdnimg.cn/direct/d3be8bd8507846b796de0b8eb8aee3ac.png" width="270"><br>选中label，找到font，透过调整点大小的值来修改字体的大小。</p><h2 id="五，按钮"><a href="#五，按钮" class="headerlink" title="五，按钮"></a>五，按钮</h2><h3 id="1，创建按钮"><a href="#1，创建按钮" class="headerlink" title="1，创建按钮"></a>1，创建按钮</h3><p>当我们在设计师界面中，将按钮放置在布局里时，按钮的高度并不会发生改变，同时变得很扁。这是因为它垂直的尺寸策略为fixed固定值，需要将其修改为与水平除了相一致的Minimum即可，或者统一修改为fixed，同时设置按钮尺寸的最小尺寸。<br><img src="https://img-blog.csdnimg.cn/direct/16b3dc92b48341c39b38c2bc1df0845f.png" width="430"><img src="https://img-blog.csdnimg.cn/direct/ab6317b6232e4078a72e79bc7765fd5a.png" width="220"></p><h3 id="2，信号和槽"><a href="#2，信号和槽" class="headerlink" title="2，信号和槽"></a>2，信号和槽</h3><p>信号和槽其实是一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QObject::<span class="hljs-built_in">connect</span>()<br></code></pre></td></tr></table></figure><p>connect函数的作用是连接信号和槽。</p><p>QObject类是Qt里最上层的类。绝大多数的Qt类往上，都会继承该类，也可以算是Qt里的祖宗类<br>该QObject可以用来表示窗口，也可以用来表示组件、控件的对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">QMetaObject::Connection </span><br><span class="hljs-function"><span class="hljs-title">QObject::connect</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                 <span class="hljs-type">const</span> QObject *sender, <span class="hljs-comment">// 信号的发送者</span></span></span><br><span class="hljs-params"><span class="hljs-function">                 <span class="hljs-type">const</span> <span class="hljs-type">char</span> *signal,  <span class="hljs-comment">// 具体的信号</span></span></span><br><span class="hljs-params"><span class="hljs-function">                 <span class="hljs-type">const</span> QObject *receiver, <span class="hljs-comment">// 信号的接收者</span></span></span><br><span class="hljs-params"><span class="hljs-function">                 <span class="hljs-type">const</span> <span class="hljs-type">char</span> *method, <span class="hljs-comment">// 槽函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">                 Qt::ConnectionType type = Qt::AutoConnection</span></span><br><span class="hljs-params"><span class="hljs-function">                 )</span></span><br></code></pre></td></tr></table></figure><p>具体的信号和槽函数是分别通过SIGNAL()和SLOT()实现的。<br>这是两个宏定义函数，最终转换成了char* 字符串类型</p><h4 id="1）点击按钮之后，将整个窗口显示全屏。"><a href="#1）点击按钮之后，将整个窗口显示全屏。" class="headerlink" title="1）点击按钮之后，将整个窗口显示全屏。"></a>1）点击按钮之后，将整个窗口显示全屏。</h4><p><strong>第一个方案：利用信号和槽的编辑界面来完成相应功能</strong></p><p>先来到设计师界面，首先保证界面内有一个按钮。<br>在上方工具栏中点击第二个按钮，第二个按钮的意思就是edit signal&#x2F;slot，专门用来编辑信号和槽的界面。<br><img src="https://img-blog.csdnimg.cn/direct/2725291547a444e6a4ce05531038fbdf.png" width="230"><br>想要实现信号和槽，就要分析谁是信号的发送者？谁是信号的接收者？<br>在该案例中，点击按钮之后，窗口才会做出反应，所以信号的发送者就是按钮，信号的接收者为窗口。<br>点击按钮，长按，往外拖出一跟线，连接到窗口上。<br>在配置连接的对话框中，点击下方从QWidget继承的信号和槽，左边信号选择按钮的clicked()信号，右边的槽函数选择窗口的showFullScreen()槽函数。<br><img src="https://img-blog.csdnimg.cn/direct/ca76040b965b4719b4b24a1044071d7b.png" width="300"></p><p><strong>第二个方案：通过转到槽来实现相应功能</strong><br>来到设计师界面中，找按钮，右键点击，选择转到槽的操作。此时，需要选择连接的信号，选择clicked()。<br><img src="https://img-blog.csdnimg.cn/direct/48f7acb1972d487291b9949aa6c917c1.png" width="234"> <img src="https://img-blog.csdnimg.cn/direct/253518acf1c04700acac52b8145074f8.png" width="240"></p><p>跳转到代码页面中<br>此时widget.h会自动生成以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 所有槽函数的声明都应该放在slots下，至于是public slots还是private slots都可以。</span><br><span class="hljs-keyword">private</span> slots:<br><span class="hljs-comment">// 自动生成的槽函数，名称以on为开头，加上信号发送者的名字，再加上信号名称组成槽函数的名字。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_pushButton_clicked</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>此时widget.cpp也会自动生成以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Widget::on_pushButton_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 写上槽函数的代码逻辑，即点击按钮之后会发生什么。</span><br>    <span class="hljs-comment">// 例如: close(); 关闭窗口</span><br>    <span class="hljs-built_in">showFullScreen</span>(); <span class="hljs-comment">// 全屏显示</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-反复点击按钮之后，可以使得label上的信息来回切换"><a href="#2-反复点击按钮之后，可以使得label上的信息来回切换" class="headerlink" title="2) 反复点击按钮之后，可以使得label上的信息来回切换"></a>2) 反复点击按钮之后，可以使得label上的信息来回切换</h4><h5 id="widget-h"><a href="#widget-h" class="headerlink" title="widget.h"></a>widget.h</h5><img src="https://img-blog.csdnimg.cn/direct/89ee46fd255a42b1a727433358320224.png" width="300"><h5 id="widget-cpp"><a href="#widget-cpp" class="headerlink" title="widget.cpp"></a>widget.cpp</h5><img src="https://img-blog.csdnimg.cn/direct/a945d6aae0a842ebabed72c8e0dc11bc.png" width="300">]]></content>
    
    
    <categories>
      
      <category>Qt学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/20/hello-world/"/>
    <url>/2024/01/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
